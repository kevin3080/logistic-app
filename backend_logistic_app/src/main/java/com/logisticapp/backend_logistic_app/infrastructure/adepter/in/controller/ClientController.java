package com.logisticapp.backend_logistic_app.infrastructure.adepter.in.controller;

import java.util.List;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.logisticapp.backend_logistic_app.domain.model.Client;
import com.logisticapp.backend_logistic_app.domain.port.in.CreateClientUseCase;
import com.logisticapp.backend_logistic_app.domain.port.in.DeleteClientUseCase;
import com.logisticapp.backend_logistic_app.domain.port.in.GetClientUseCase;
import com.logisticapp.backend_logistic_app.domain.port.in.UpdateClientUseCase;
import com.logisticapp.backend_logistic_app.infrastructure.adepter.in.dto.ClientRequest;
import com.logisticapp.backend_logistic_app.infrastructure.exception.ResourceNotFoundException;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/clients")
@RequiredArgsConstructor
public class ClientController {

    private final CreateClientUseCase createClientUseCase;
    private final GetClientUseCase getClientUseCase;
    private final UpdateClientUseCase updateClientUseCase;
    private final DeleteClientUseCase deleteClientUseCase;

    @Operation(summary = "Register a new client")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Client registered successfully",
            content = { @Content(mediaType = "application/json",
            schema = @Schema(implementation = Client.class)) }),
        @ApiResponse(responseCode = "400", description = "Invalid input data",
            content = @Content)
    })
    @PostMapping
    public ResponseEntity<Client> registerClient(@Valid @RequestBody ClientRequest request) {
        // ID is null as it will be generated by the database/Hibernate
        Client client = new Client(null, request.getName(), request.getEmail(), request.getPhone());
        Client createdClient = createClientUseCase.createClient(client);
        return new ResponseEntity<>(createdClient, HttpStatus.CREATED);
    }

    @Operation(summary = "Get a client by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Found the client",
            content = { @Content(mediaType = "application/json",
            schema = @Schema(implementation = Client.class)) }),
        @ApiResponse(responseCode = "404", description = "Client not found",
            content = @Content)
    })
    @GetMapping("/{id}")
    public ResponseEntity<Client> getClientById(@PathVariable UUID id) {
        return getClientUseCase.getClientById(id)
                .map(client -> new ResponseEntity<>(client, HttpStatus.OK))
                .orElseThrow(() -> new ResourceNotFoundException("Client not found with id: " + id));
    }

    @Operation(summary = "Get all clients")
    @ApiResponse(responseCode = "200", description = "List of all clients",
        content = { @Content(mediaType = "application/json",
        schema = @Schema(implementation = Client.class)) })
    @GetMapping
    public ResponseEntity<List<Client>> getAllClients() {
        List<Client> clients = getClientUseCase.getAllClients();
        return new ResponseEntity<>(clients, HttpStatus.OK);
    }

    @Operation(summary = "Update an existing client")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Client updated successfully",
            content = { @Content(mediaType = "application/json",
            schema = @Schema(implementation = Client.class)) }),
        @ApiResponse(responseCode = "400", description = "Invalid input data",
            content = @Content),
        @ApiResponse(responseCode = "404", description = "Client not found",
            content = @Content)
    })
    @PutMapping("/{id}")
    public ResponseEntity<Client> updateClient(@PathVariable UUID id, @Valid @RequestBody ClientRequest request) {
        // Pass the ID from the path to ensure the correct client is updated
        Client updatedClient = new Client(id, request.getName(), request.getEmail(), request.getPhone());
        Client result = updateClientUseCase.updateClient(id, updatedClient);
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @Operation(summary = "Delete a client by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "Client deleted successfully",
            content = @Content),
        @ApiResponse(responseCode = "404", description = "Client not found",
            content = @Content)
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteClient(@PathVariable UUID id) {
        deleteClientUseCase.deleteClient(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}